name: Go

on:
  push:
    tags: 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows]
        arch: [386, amd64, arm64]
    steps:
    - name: Get latest go version
      id: version
      run: |
        echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ steps.version.outputs.go_version }}

    - name: Check out codes
      uses: actions/checkout@v2

    - name: Get Tag Version
      id: get_version
      run: echo ::set-output name=APP_VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Build
      id: go_build
      run: |
        CGO_ENABLED=0
        GOOS=${{ matrix.os }}
        GOARCH=${{ matrix.arch }}
        rm -rf fast-qrcode*
        go build -ldflags "-s -w -extldflags -static -extldflags -static" ./...
        tar -czvf fast-qrcode_${APP_VERSION}_${{ matrix.os }}_${{ matrix.arch }}.tar.gz fast-qrcode* default.conf
        ls -al
        echo "::set-output name=status::success"
      env:
        APP_VERSION: ${{ steps.get_version.outputs.APP_VERSION }}
    - name: Upload Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: *.tar.gz
        draft: true